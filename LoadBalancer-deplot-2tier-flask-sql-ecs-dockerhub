Below is a long-form, step-by-step “copy-and-paste” blog post you can publish as-is (or tweak).
 Every section explains why you do a thing, where you click in the AWS Console, what value to type, and a short “purpose” sentence so newcomers understand the concepts.

🏗️ Building a Two-Tier Flask + MySQL App on AWS — 100 % Point-and-Click GUI
Goal: create an enterprise-style environment (custom VPC, public & private subnets, IGW, NAT, ALB, ECS Fargate) and deploy:
Flask container (public)


MySQL 5.7 container (private)


All without the CLI or IaC.

Table of Contents
Networking Foundation


Security Groups


Application Load Balancer


ECS Fargate — Task Defs & Services


Smoke Test & Troubleshooting


Clean-up



1 Networking Foundation
Object
Why we need it
VPC
Private IP space for everything
4 subnets
2 public (ALB + Flask tasks) & 2 private (MySQL tasks)
IGW
Let public subnets talk to Internet
NAT Gateway
Let private subnets pull Docker images / apt-get, but stay private
Route tables
Wire the IGW & NAT to correct subnets


1.1 Create VPC
Field (Console)
Fill with
Purpose
Resources to create
VPC only
We’ll add sub-resources manually
Name tag
twotier-vpc
Easy to find later
IPv4 CIDR block
10.0.0.0/16
Room for /24 subnets
IPv6 / Tenancy
leave default
Not needed

Click Create VPC → View VPC.

1.2 Create Subnets (4 clicks)
#
Name
AZ
CIDR
Purpose
1
Public-Subnet-1
us-east-1a
10.0.1.0/24
ALB + Flask (AZ-a)
2
Public-Subnet-2
us-east-1b
10.0.2.0/24
ALB + Flask (AZ-b)
3
Private-Subnet-1
us-east-1a
10.0.3.0/24
MySQL (AZ-a)
4
Private-Subnet-2
us-east-1b
10.0.4.0/24
MySQL (AZ-b)

Console path: VPC → Subnets → Create subnet.
 Pick twotier-vpc each time, fill the table rows, click Add subnet → Create.

1.3 Internet Gateway (IGW)
VPC → Internet Gateways → Create IGW


Name = twotier-igw → Create → Actions → Attach to VPC → pick twotier-vpc.


Purpose: public subnets now have a route to the Internet.

1.4 NAT Gateway
Field
Fill
Purpose
Name
twotier-nat
readable
Subnet
Public-Subnet-1
must reside in a public subnet
Elastic IP
click Allocate Elastic IP
public IP for NAT box

Console: VPC → NAT Gateways → Create → wait until status = Available.

1.5 Route Tables
Table
Route
Subnet Associations
Why
twotier-public-rt
0.0.0.0/0 → twotier-igw
Public-Subnet-1 & 2
Outbound & inbound Internet
twotier-private-rt
0.0.0.0/0 → twotier-nat
Private-Subnet-1 & 2
Private subnets get outbound-only Internet

Path: VPC → Route Tables → Create → add route → save → Subnet Associations tab.

2 Security Groups
Principle: ALB open to the world on 80,
 ALB speaks 5000 to Flask tasks, Flask speaks 3306 to MySQL.
SG
Inbound Rules
Outbound
Purpose
alb-sg
HTTP 80 from 0.0.0.0/0
All
Public entrypoint
flask-sg
TCP 5000 from alb-sg
All
Only ALB can hit Flask
mysql-sg
TCP 3306 from flask-sg
All
Only Flask can hit DB

Console: EC2 → Security Groups → Create → add rules exactly as table.

3 Application Load Balancer
3.1 Create ALB
Path: EC2 → Load Balancers → Create
Field
Fill
Name
twotier-alb
Scheme
Internet-facing
IP type
IPv4
VPC
twotier-vpc
Subnets
Public-Subnet-1 & 2
Security Group
alb-sg
Listener
HTTP :80 (default)

Click Create Load Balancer.

3.2 Target Group for Flask
Path: EC2 → Target Groups → Create target group
Field
Value
Target type
IP addresses
Name
twotier-flask-tg
Protocol / Port
HTTP / 5000
VPC
twotier-vpc
Health check path
/health
Health check port
Override → 5000

Click Create target group.
 Do NOT register targets manually — ECS will.
Back in ALB → Listeners → :80 → Actions → Edit → Default action → Forward to twotier-flask-tg.

4 ECS Fargate
4.1 Create Cluster
Path: ECS → Clusters → Create
 Template = Networking only → Name = twotier_cluster → Create.

4.2 Task Definitions
4.2.1 MySQL Task (twotier_task_sql)
Section
Field
Value
Infrastructure
Launch type
Fargate


Task size
0.5 vCPU / 1 GB
Container
Name
mysql


Image
mysql:5.7


Port
3306/TCP
Env Vars


MYSQL_DATABASE=myDb, MYSQL_USER=admin, MYSQL_PASSWORD=admin, MYSQL_ROOT_PASSWORD=admin
Logs
CloudWatch
default group

Click Create.
4.2.2 Flask Task (twotier_task_flask)
Section
Field
Value
Container
Name
flaskapp


Image
taimooranwar/flaskapptest:latest


Port
5000/TCP
Env Vars


MYSQL_HOST=<Private IP of SQL task>MYSQL_USER=adminMYSQL_PASSWORD=adminMYSQL_DB=myDb
HealthCheck
Command
`CMD-SHELL, curl -f http://localhost:5000/health


Start-period
60 s


Interval
30 s


Timeout
5 s
Logs
CloudWatch
default

Click Create.

4.3 Services
4.3.1 MySQL Service (twotier-service-sql)
Field
Value
Cluster
twotier_cluster
Task def
twotier_task_sql
Desired tasks
1
Subnets
Private-Subnet-1/2
Security Group
mysql-sg
Auto-assign Public IP
Disabled
Load Balancer
none

Create → wait until Running.
4.3.2 Flask Service (twotier-service-flask)
Field
Value
Cluster
twotier_cluster
Task def
twotier_task_flask
Desired tasks
1
Subnets
Public-Subnet-1/2
Security Group
flask-sg
Public IP
Enabled (Fargate assigns)
Load Balancing
ALB = twotier-alb ; Listener 80 ; Target group = twotier-flask-tg

Create → watch deployment.

5 Smoke Test & Troubleshooting
Target health: EC2 → Target Groups → twotier-flask-tg
 Status should show ✅ Healthy.


Browser test:
 http://twotier-alb-XXXX.us-east-1.elb.amazonaws.com/
 Your stylish index.html appears, messages save, page auto-updates.



Common Errors
Error
Likely Cause
Quick Fix
504 Gateway Timeout
Targets Unhealthy
– Health check path/port wrong– Port 5000 blocked in SG
Cannot connect to MySQL
Env var MYSQL_HOST wrong
Use SQL task’s private IP or Service Discovery DNS
Image pull fails in private subnets
NAT not configured
Ensure private RT uses NAT gateway


6 Clean-up
Delete ECS services, wait for tasks to stop.


Delete the load balancer and target group.


Release the NAT Elastic IP (to avoid charges).


Delete NAT gateway, IGW, subnets, and finally the VPC.


Remove any CloudWatch log groups if desired.



🎉 You’re Done!
You now have a repeatable, fully explained point-and-click procedure to spin up a production-style two-tier app on AWS.
Happy shipping! 🚀
===================================================================================================================================================================
===================================================================================================================================================================
===================================================================================================================================================================

Below is a safe-order checklist that removes every resource we created without hitting dependency errors.
 (Everything is done in the AWS Console UI; the service names are the ones we used in the blog.)

🔑 Golden Rule
Delete from the inside-out:
ECS (tasks → services → cluster)


Load-balancing stuff (target group → ALB)


Compute-related networking (NAT, IGW, ENIs, EIPs)


Core VPC objects (route tables → subnets → security groups → VPC)



1 . ECS / Fargate
1-A Stop & delete the services
Console ➜ ECS → Clusters


Click twotier_cluster ➜ Services tab


For each service (twotier-service-flask, twotier-service-sql)


Actions → Delete ➜ type delete ➜ Delete


Wait ~30 s until the Tasks tab shows 0 Running / 0 Pending.
1-B Delete the cluster
Still on Clusters list ➜ Tick twotier_cluster ➜ Delete cluster ➜ type delete ➜ Delete
1-C (Optional) Deregister task definitions
ECS → Task definitions ➜ open each (twotier_task_flask, twotier_task_sql) ➜
 Actions → Deregister (repeat for all revisions).
 (Not billed, but keeps console tidy.)

2 . Load Balancer & Target Group
2-A Delete Target Group
EC2 → Target Groups ➜ select twotier-flask-tg ➜ Actions → Delete ➜ Delete
2-B Delete ALB
EC2 → Load Balancers ➜ select twotier-alb ➜ Actions → Delete ➜ Delete

3 . Networking Edge Resources
3-A Delete NAT Gateway & release Elastic IP
VPC → NAT Gateways ➜ select twotier-nat ➜ Actions → Delete ➜ Delete


Note the Elastic IP address shown, then:
 EC2 → Elastic IP addresses ➜ tick the same EIP ➜ Actions → Release ➜ Release


(Must wait ~1 min until NAT status = deleted before you can delete private route.)
3-B Detach & delete Internet Gateway
VPC → Internet Gateways ➜ select twotier-igw
 Actions → Detach from VPC ➜ confirm ➜ Actions → Delete ➜ Delete

4 . Route Tables
VPC → Route Tables


Delete twotier-private-rt first (no edge dependencies)
 Select ➜ Actions → Delete ➜ confirm


Delete twotier-public-rt next.



5 . Subnets
VPC → Subnets ➜
 Delete in any order:
Subnet name
Private-Subnet-1
Private-Subnet-2
Public-Subnet-1
Public-Subnet-2

(Select ➜ Actions → Delete subnet ➜ confirm)

6 . Security Groups (custom ones)
EC2 → Security Groups
Delete the three you created (they are now unused):
alb-sg


flask-sg


mysql-sg


(tick ➜ Actions → Delete security group)

7 . Delete the VPC
VPC → Your VPCs ➜ select twotier-vpc ➜ Actions → Delete VPC ➜ confirm.
AWS automatically removes any remaining DHCP options set or route-table stubs.

8 . (Optional) House-keeping
Resource
Console Path
Action
CloudWatch Log groups
CloudWatch → Logs → Log groups
delete /ecs/twotier_task_flask & /ecs/twotier_task_sql
ECR repos (if you pushed images)
ECR → Repositories
delete repo
