### **Step-by-Step AWS Console Guide with Explanations**  
This guide explains **how to securely deploy a backend on ECS with HTTPS** (using CloudFront) and **integrate it with an Amplify frontend**. Each step includes **why it’s needed** and **how it works**.

---

### **1. Create a Dedicated VPC**  
**Purpose**: Isolate your backend infrastructure from the default AWS network for security and control.  

**Steps**:  
1. **VPC Console** → **Create VPC**.  
2. **Name**: `prod-vpc`.  
3. **IPv4 CIDR**: `10.0.0.0/16` (provides 65k+ IPs).  
4. **Create**.  

**Why This Step?**  
A VPC acts as a private network for your AWS resources. Using a non-default VPC ensures clean network boundaries and avoids conflicts.

---

### **2. Create Public Subnets**  
**Purpose**: Deploy resources in multiple Availability Zones (AZs) for redundancy.  

**Steps**:  
1. **Subnets** → **Create Subnet**.  
   - **VPC**: `prod-vpc`.  
   - **Subnet 1**:  
     - **Name**: `public-subnet-1a`.  
     - **AZ**: `us-east-1a`.  
     - **CIDR**: `10.0.1.0/24`.  
     - **Enable auto-assign public IPv4** (required for Fargate tasks).  
   - **Subnet 2**:  
     - **Name**: `public-subnet-1b`.  
     - **AZ**: `us-east-1b`.  
     - **CIDR**: `10.0.2.0/24`.  
     - Enable public IPv4.  

**Why This Step?**  
Public subnets allow resources to communicate with the internet. Using two AZs ensures high availability.

---

### **3. Attach an Internet Gateway**  
**Purpose**: Enable internet access for resources in public subnets.  

**Steps**:  
1. **Internet Gateways** → **Create**.  
   - **Name**: `prod-igw`.  
2. **Attach to VPC**: Select `prod-vpc`.  

**Why This Step?**  
The internet gateway (IGW) allows traffic between your VPC and the internet. Without it, public subnets can’t route external traffic.

---

### **4. Configure Route Tables**  
**Purpose**: Define traffic routing rules for subnets.  

**Steps**:  
1. **Route Tables** → **Create**.  
   - **Name**: `public-route-table`.  
   - **VPC**: `prod-vpc`.  
2. **Edit Routes**:  
   - Add route: `0.0.0.0/0` → Target `prod-igw` (send all external traffic through the IGW).  
3. **Subnet Associations**:  
   - Attach `public-subnet-1a` and `public-subnet-1b`.  

**Why This Step?**  
Route tables act as traffic signs. This rule ensures all outbound traffic from public subnets uses the internet gateway.

---

### **5. Configure Security Groups**  
**Purpose**: Act as a firewall to control inbound/outbound traffic.  

#### **ALB Security Group**:  
1. **Security Groups** → **Create**.  
   - **Name**: `alb-sg`.  
   - **VPC**: `prod-vpc`.  
   - **Inbound Rules**:  
     - **HTTP (Port 80)** from `0.0.0.0/0` (allow public access).  
   - **Outbound Rules**: Allow all traffic.  

#### **ECS Security Group**:  
1. **Create Security Group**:  
   - **Name**: `ecs-sg`.  
   - **VPC**: `prod-vpc`.  
   - **Inbound Rules**:  
     - **Custom TCP (Port 5000)** → Source: `alb-sg` (only allow traffic from the ALB).  
   - **Outbound Rules**: Allow all traffic.  

**Why This Step?**  
Security groups enforce network security. The ALB accepts HTTP traffic, while the ECS tasks only allow traffic from the ALB on port 5000.

---

### **6. Create an Application Load Balancer (ALB)**  
**Purpose**: Distribute traffic across ECS tasks and act as the entry point for the backend.  

**Steps**:  
1. **EC2 Console** → **Load Balancers** → **Create**.  
   - **Name**: `prod-alb`.  
   - **Scheme**: Internet-facing.  
   - **VPC**: `prod-vpc`.  
   - **Subnets**: Select `public-subnet-1a` and `public-subnet-1b`.  
   - **Security Group**: `alb-sg`.  
2. **Create Target Group** (during ALB setup):  
   - **Name**: `backend-tg`.  
   - **Protocol**: HTTP:5000.  
   - **Health Check Path**: `/` (root endpoint of your backend).  

**Why This Step?**  
The ALB routes traffic to healthy ECS tasks. The target group defines how the ALB communicates with your backend.

---

### **7. Create an ECS Cluster**  
**Purpose**: Group your backend tasks logically.  

**Steps**:  
1. **ECS Console** → **Clusters** → **Create Cluster**.  
   - **Name**: `prod-cluster`.  
   - **VPC**: `prod-vpc`.  
   - **Networking**: AWS Fargate (serverless compute).  

**Why This Step?**  
An ECS cluster organizes your tasks and services. Fargate removes the need to manage EC2 instances.

---

### **8. Define the Task Definition**  
**Purpose**: Specify how your Docker container runs.  

**Steps**:  
1. **Task Definitions** → **Create**.  
   - **Family**: `backend-task`.  
   - **Launch Type**: FARGATE.  
   - **Memory**: 0.5GB.  
   - **CPU**: 0.25 vCPU.  
2. **Add Container**:  
   - **Name**: `backend-container`.  
   - **Image**: `taimooranwar/backend-api:latest`.  
   - **Port Mappings**: `5000` (matches your Node.js server port).  
   - **Environment Variables**:  
     - `PORT=5000`, `MONGODB_URI=<your MongoDB URI>`.  

**Why This Step?**  
The task definition is a blueprint for your container. It defines resource limits, networking, and environment variables.

---

### **9. Deploy the ECS Service**  
**Purpose**: Run and maintain your backend tasks.  

**Steps**:  
1. In `prod-cluster` → **Services** → **Create**.  
   - **Launch Type**: FARGATE.  
   - **Task Definition**: `backend-task`.  
   - **Service Name**: `backend-service`.  
   - **Number of Tasks**: `1`.  
2. **Networking**:  
   - **VPC**: `prod-vpc`.  
   - **Subnets**: `public-subnet-1a` and `public-subnet-1b`.  
   - **Security Group**: `ecs-sg`.  
   - **Auto-assign Public IP**: **Enabled** (required for Fargate tasks in public subnets).  
3. **Load Balancer**:  
   - Attach `prod-alb` and map to port `5000`.  

**Why This Step?**  
The ECS service ensures your tasks are always running. Attaching the ALB allows external traffic to reach your backend.

---

### **10. Set Up CloudFront for HTTPS**  
**Purpose**: Resolve mixed-content errors by terminating HTTPS at CloudFront.  

Go to CloudFront Console → Create Distribution.

Origin Settings:

Origin Domain: prod-alb-123456.us-east-1.elb.amazonaws.com (your ALB DNS)

Origin Protocol: HTTP (ALB doesn’t have HTTPS)

Path: Leave empty

Default Cache Behavior:

Viewer Protocol Policy: Redirect HTTP to HTTPS

Allowed HTTP Methods: GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE

Cache Policy: CachingDisabled (for dynamic backend)

Distribution Settings:

Alternate Domain Name: Leave empty (no custom domain)

SSL Certificate: Default CloudFront Certificate (uses *.cloudfront.net HTTPS)

Create Distribution → Note the CloudFront domain (e.g., d123456.cloudfront.net).

**Why This Step?**  
CloudFront acts as a global CDN and HTTPS proxy. Your frontend (HTTPS) communicates with CloudFront (HTTPS), which forwards requests to the ALB (HTTP), avoiding mixed-content errors.

---

### **12. Update ALB Security Group
Go to EC2 Security Groups → Find your ALB’s SG (alb-sg).

Edit Inbound Rules:

Allow HTTP (Port 80) from CloudFront’s IP Ranges (AWS IP List → Look for CLOUDFRONT entries).

---

### **13. Update Amplify Frontend**  
**Purpose**: Point the frontend to the HTTPS CloudFront endpoint.  

**Steps**:  
1. **Amplify Console** → **Environment Variables**.  
   - Update `REACT_APP_API_URL` to `https://d123456.cloudfront.net`.  
2. **Redeploy** the Amplify app.  

**Why This Step?**  
The frontend now uses HTTPS to communicate with CloudFront, ensuring secure and compliant requests.

---

### **14. Final Checks**  
#### **Security Group Updates**:  
- Allow CloudFront IP ranges in `alb-sg` (see [AWS IP list](https://ip-ranges.amazonaws.com/ip-ranges.json)).  
- Ensure MongoDB Atlas whitelists ECS task IPs.  

---

### **Architecture Summary**  
```
Frontend (HTTPS Amplify)  
  → CloudFront (HTTPS)  
    → ALB (HTTP)  
      → ECS Tasks (Port 5000)  
        → MongoDB Atlas  
```

### **Troubleshooting Tips**  
1. **ALB Health Checks**: Ensure the target group’s health checks pass (path `/` returns 200).  
2. **ECS Logs**: Check CloudWatch logs for task startup errors.  
3. **CORS Errors**: Verify the `origin` array in `server.js` includes your Amplify and CloudFront URLs.  
4. **Security Groups**: Confirm `ecs-sg` allows traffic from `alb-sg` on port 5000.  

By following this guide, you’ve created a secure, scalable backend with HTTPS termination and proper network isolation.
