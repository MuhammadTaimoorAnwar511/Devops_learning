####################################################### "To install docker on ec2 ubuntu"
sudo apt-get update
sudo apt-get install docker.io -y
sudo systemctl start docker
sudo chmod 666 /var/run/docker.sock
docker images
docker ps -a
sudo systemctl enable docker
########################################################"Configuring the self-hosted runner application as a service"
sudo ./svc.sh install
sudo ./svc.sh start
sudo ./svc.sh status
sudo ./svc.sh stop
sudo ./svc.sh uninstall
###########################################################"Create env file in workflow gtihub"
      - name: Create .env file
        run: echo "${{ secrets.ENV_FILE }}" > .env
###########################################################"TO install Docker Compose"
apt install docker-compose
######################################
node -v
npm -v
sudo npm i -g pm2
pm2 -v
nvm use 20
pm2 ls
pm2 start/stop/reload/restart/delete <api-backend.js>/<build/index.js>   --name <name of service>   
pm2 logs <id>
pm2 save
######################################install nginx
apt install nginx -y
systemctl start/stop/reload nginx
NGINX CONFIG:/etc/nginx//nginx.conf
DEFAULT WEBPAGE:/usr/share/nginx/html
ENABLE HTTP SERVICE:
sudo apt install ufw
sudo ufw enable
sudo ufw allow http OR sudo ufw allow 80/tcp
sudo ufw status
#########################################Delete Certbot
sudo certbot certificates
sudo certbot delete --cert-name <taimoor.quecko.org>
##########################################################DOCKER RELATED
docker build -t your-image-name:your-tag .
docker run -d --name your-container-name your-image-name:your-tag
=
docker network create your-network-name
docker run -d --name your-container-name -p host-port:container-port --network your-network-name your-image-name:your-tag
====
docker pull mongo:latest
docker volume create your-volume-name
docker run -d \
  --name your-container-name \
  -p host-port:container-port \
  --network your-network-name \
  -v your-volume-name:/container/data/path \
  your-image-name:your-tag
====
docker run -d -p 5000:5000 \
-e PORT=5000 \
-e MONGODB_URI=mongodb+srv://i211232:l7zA8NMU7S4Kogq1@cluster0.anmxk4g.mongodb.net/ \
--name backend \
nauman920/backend:latest
====
docker run -d -p 5000:5000 --env-file .env --name backend nauman920/backend:latest
docker run -d -p 5000:5000 --env-file .env --name backend nauman920/backend:latest
====
docker run -d --name Backend -e PORT=5000 -e MONGODB_URI=mongodb+srv://i211232:l7zA8NMU7S4Kogq1@cluster0.anmxk4g.mongodb.net/ --network three-tier nauman920/backend:latest
==
docker exec -it backend printenv
====
docker network ls
docker inspect network id  
===
docker run -ti <img id> sh
docker exec -ti <container id> sh

 
